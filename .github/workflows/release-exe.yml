name: Release Automática

on:
  workflow_run:
    workflows: ["Changelog"]
    types:
      - completed

permissions:
  contents: write

jobs:
  release:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout do código
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # 1️⃣ Baixa a tag (tag.txt) re‑enviada pelo Changelog
      - name: Encontrar run do workflow 'Changelog'
        id: changelog_run
        run: |
          RUN_ID=$(gh run list \
            --workflow="Changelog" \
            --branch=master --limit=1 \
            --json databaseId,status \
            -q '.[] | select(.status=="completed") | .databaseId')
          echo "run_id=$RUN_ID" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Baixar tag da execução de Changelog
        run: |
          gh run download ${{ steps.changelog_run.outputs.run_id }} -n release-tag
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Ler a tag
        id: read_tag
        run: |
          TAG=$(cat tag.txt)
          echo "tag=$TAG" >> $GITHUB_OUTPUT

      # 2️⃣ Instalar gh para buscar o artefato do build
      - name: Instalar GitHub CLI
        run: |
          sudo apt update && sudo apt install -y gh
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # 3️⃣ Encontrar o run mais recente do Build EXE on Windows
      - name: Encontrar run do Build EXE
        id: build_run
        run: |
          RUN_ID=$(gh run list \
            --workflow="Build EXE on Windows" \
            --branch=master --limit=1 \
            --json databaseId,status \
            -q '.[] | select(.status=="completed") | .databaseId')
          echo "run_id=$RUN_ID" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # 4️⃣ Baixar o artefato app‑windows desse run
      - name: Baixar artefato .exe
        run: |
          mkdir -p artifact
          gh run download ${{ steps.build_run.outputs.run_id }} \
            -n app-windows -D artifact
          ls artifact
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # 5️⃣ Criar o Release no GitHub com a tag e o exe
      - name: Gerar changelog temporário
        run: |
          NEW_TAG=${{ steps.read_tag.outputs.tag }}
          LAST_TAG=$(git describe --tags --abbrev=0 "${NEW_TAG}^" 2>/dev/null || echo "")

          echo "## Changelog: $NEW_TAG" > temp_changelog.md

          if [ -n "$LAST_TAG" ]; then
            echo "" >> temp_changelog.md
            git log $LAST_TAG..$NEW_TAG --pretty=format:"- %s ([%an](mailto:%ae))" >> temp_changelog.md
          else
            git log --pretty=format:"- %s ([%an](mailto:%ae))" >> temp_changelog.md
          fi

      - name: Criar Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.read_tag.outputs.tag }}
          name: "gerpy-${{ steps.read_tag.outputs.tag }}"
          files: artifact/main.exe
          body_path: temp_changelog.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

